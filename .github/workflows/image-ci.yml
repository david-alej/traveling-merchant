name: image-ci

on:
  push:
    branches:
      - "main"
    tags:
      - "[0-9]*.[0-9]*.[0-9]*"
    paths:
      # Only rebuild images when applications change
      - "02-app/**/*"

jobs:
  build-test-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - 02-app/backend
          - 02-app/frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{secrets.ACTION_PAT}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build Image
        working-directory: ${{ matrix.path }}
        run: |
          task build-testing-image IMAGE_TAG=${{ github.run_id }}

  test-unit:
    name: Unit tests in Docker
    needs: [build-test-image]
    runs-on: ubuntu-latest
    permissions:
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{secrets.ACTION_PAT}}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Unit Testing in Docker
        working-directory: 02-app/backend
        run: task run-ci-unit-tests IMAGE_TAG="$GITHUB_RUN_ID"

  test-integration:
    name: Integration tests in Compose
    needs: [build-test-image]
    runs-on: ubuntu-latest
    environment: test
    env:
      TESTING_IMAGE: davidalej/traveling-merchant-backend:${{ github.run_id }}
      COOKIES_SECRET: ${{ secrets.COOKIES_SECRET }}
      CSRF_SECRET: ${{ secrets.CSRF_SECRET }}
      CSRF_COOKIE_NAME: ${{ secrets.CSRF_COOKIE_NAME }}
    permissions:
      packages: read

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Run integration tests with Docker Compose
        working-directory: 02-app/backend
        run: |
          docker compose -f docker-compose.integration-test.yml \
            up --build --exit-code-from sut

  scan-image:
    name: Scan Image with Trivy
    needs: [build-test-image]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - davidalej/traveling-merchant-backend:${{  github.run_id  }}
          - davidalej/traveling-merchant-frontend:${{  github.run_id  }}

    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Pull image to scan
        run: docker pull ${{ matrix.image }}

      - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image }}
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "HIGH,CRITICAL"
          format: "sarif"
          output: "trivy-results.sarif"
          limit-severities-for-sarif: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
          token: ${{ secrets.GITHUB_TOKEN }}

  generate-image-tag:
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, scan-image]
    outputs:
      image_tag: ${{ steps.generate-image-tag.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Necessary to get all tags for IMAGE_TAG generation with git describe
          fetch-depth: 0

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{secrets.ACTION_PAT}}

      - name: Generate Image Tag
        id: generate-image-tag
        working-directory: 07-cicd/github-actions
        run: |
          image_tag=$(task generate-version-tag)
          echo "image_tag=$image_tag" >> $GITHUB_OUTPUT

  build-tag-push:
    runs-on: ubuntu-latest
    needs: generate-image-tag
    strategy:
      matrix:
        path:
          - 02-app/backend
          - 02-app/frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{secrets.ACTION_PAT}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build Image
        env:
          IMAGE_TAG: ${{ needs.generate-image-tag.outputs.image_tag }}
        working-directory: ${{ matrix.path }}
        run: |
          task build-container-image-multi-arch IMAGE_TAG=${IMAGE_TAG}

  update-tags:
    runs-on: ubuntu-latest
    needs: [generate-image-tag, build-tag-push]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{secrets.ACTION_PAT}}

      - name: Update Image Tags
        working-directory: 07-cicd/github-actions
        env:
          IMAGE_TAG: ${{ needs.generate-image-tag.outputs.image_tag }}
        run: |
          # Update staging tags for push to main or release tag
          task update-staging-image-tags NEW_TAG=${IMAGE_TAG}            

          # Update production tags only for release tags
          if [[ $GITHUB_REF == refs/tags/*.*.* ]]; then
            task update-production-image-tags NEW_TAG=${IMAGE_TAG}
          fi

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          base: main
          token: ${{ secrets.ACTION_PAT }}
          title: "Update image tags to (${{ needs.generate-image-tag.outputs.image_tag }})"
